#!/usr/bin/env bash
set -eo pipefail

BUILDPACK_INSTALL_PATH="/tmp/buildpacks"

download_buildpack() {
    buildpack_url="$1"
    buildpack_name=$(basename "$buildpack_url")
    buildpack_commit="$2"

    echo "Fetching $buildpack_name..."

    set +e
    git clone --branch "$buildpack_commit" --depth 1 "$buildpack_url" $BUILDPACK_INSTALL_PATH/"$buildpack_name" &>/dev/null
    SHALLOW_CLONED=$?
    set -e
    if [ $SHALLOW_CLONED -ne 0 ]; then
        # if the shallow clone failed partway through, clean up and try a full clone
        rm -rf "${BUILDPACK_INSTALL_PATH:?}"/"$buildpack_name"
        git clone --quiet "$buildpack_url" $BUILDPACK_INSTALL_PATH/"$buildpack_name"
        pushd $BUILDPACK_INSTALL_PATH/"$buildpack_name" &>/dev/null
            git checkout --quiet "$buildpack_commit"
        popd &>/dev/null
    fi

    echo "Done."
}

mkdir -p $BUILDPACK_INSTALL_PATH

download_buildpack https://github.com/heroku/heroku-buildpack-multi.git          v1.0.0
download_buildpack https://github.com/aledbf/heroku-buildpack-nodejs.git         67729e96
download_buildpack https://github.com/heroku/heroku-buildpack-go.git             v34

echo "Downloading node.js"
mkdir -p /tmp/node.js
array=( 4.4.4 6.1.0 6.2.0 )
for VERSION in "${array[@]}"
do
  echo $VERSION
  curl "https://s3pository.heroku.com/node/v$VERSION/node-v$VERSION-linux-x64.tar.gz" -sSL -o /tmp/node.js/node-v$VERSION-linux-x64.tar.gz
done

echo "Configuring default version"
ln -s /tmp/node.js/node-v6.2.0-linux-x64.tar.gz /tmp/node.js/latest-node-linux-x64.tar.gz
